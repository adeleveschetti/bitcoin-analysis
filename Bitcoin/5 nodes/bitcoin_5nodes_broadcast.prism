ctmc


const k;
const T=k*600;

// rates
const double rb=10/126 ;
const double mR = 1/600;
const double lR = 1-mR;

// hashing powers
const double hR = 0.2;
const double hR1 = 0.2;
const double hR2 = 0.2;
const double hR3 = 0.2;
const double hR4 = 0.2;

const int N = 100;

// state variables
const int Mine = 0;
const int Winner = 1;
const int Lost = 2;
const int Move = 3;
const int Add = 4;

module Hasher

  Hasher_STATE : [0..1] init 0;

	[win] (Hasher_STATE=0) -> mR : (Hasher_STATE'=0);
	[lose] (Hasher_STATE=0) -> lR : (Hasher_STATE'=0);

endmodule

module Hasher1

  Hasher1_STATE : [0..1] init 0;

	[win1] (Hasher1_STATE=0) -> mR : (Hasher1_STATE'=0);
	[lose1] (Hasher1_STATE=0) -> lR : (Hasher1_STATE'=0);

endmodule

module Hasher2

  Hasher2_STATE : [0..1] init 0;

	[win2] (Hasher2_STATE=0) -> mR : (Hasher2_STATE'=0);
	[lose2] (Hasher2_STATE=0) -> lR : (Hasher2_STATE'=0);

endmodule

module Hasher3

  Hasher3_STATE : [0..1] init 0;

	[win3] (Hasher3_STATE=0) -> mR : (Hasher3_STATE'=0);
	[lose3] (Hasher3_STATE=0) -> lR : (Hasher3_STATE'=0);

endmodule

module Hasher4

  Hasher4_STATE : [0..1] init 0;

	[win4] (Hasher4_STATE=0) -> mR : (Hasher4_STATE'=0);
	[lose4] (Hasher4_STATE=0) -> lR : (Hasher4_STATE'=0);

endmodule


module M

	M_STATE : [Mine..Move] init Mine;
	b : block {m,0;genesis,0};
	B : blockchain [{genesis,0;genesis,0}];
	c : [0..N] init 0;
	setMiner : list [];

	[win] (M_STATE = Mine) -> hR : (M_STATE'=Winner)&(b'=createB(b,B,c))&(c'=c+1);
  	[lose] (M_STATE = Mine) -> hR : (M_STATE'=Lost);
	[addBlock] (M_STATE = Winner) -> 1 : (B'=addBlock(B,b))&(M_STATE'=Mine);
	[] (M_STATE = Lost)&!isEmpty(set)-> 1 : (b'=extractBlock(set))&(M_STATE'=Move);
	[] (M_STATE = Lost)&!isEmpty(setMiner)   ->  1 : (M_STATE'=Add)&(b'=extractBlock(setMiner));
  	[] (M_STATE = Lost)&isEmpty(set)&isEmpty(setMiner)   ->  1 : (M_STATE'=Mine);
  	[removeBlock] (M_STATE=Move) -> 1 : (setMiner'=addBlockSet(setMiner,b))&(M_STATE'=Mine);
	[] (M_STATE=Add)&(canBeInserted(B,b)) -> 1 : (B'=addBlock(B,b))&(setMiner'=removeBlock(setMiner,b))&(M_STATE'=Mine);
	[] (M_STATE=Add)&(!canBeInserted(B,b)) -> 1 : (M_STATE'=Lost);
endmodule

module M1

	M1_STATE : [Mine..Move] init Mine;
	b1 : block {m1,0;genesis,0};
	B1 : blockchain [{genesis,0;genesis,0}];
	c1 : [0..N] init 0;
	setMiner1 : list [];

	[win1] (M1_STATE = Mine) -> hR1 : (M1_STATE'=Winner)&(b1'=createB(b1,B1,c1))&(c1'=c1+1);
  	[lose1] (M1_STATE = Mine) -> hR1 : (M1_STATE'=Lost);
	[addBlock1] (M1_STATE = Winner) -> 1 : (B1'=addBlock(B1,b1))&(M1_STATE'=Mine);
	[] (M1_STATE = Lost)&!isEmpty(set1)-> 1 : (b1'=extractBlock(set1))&(M1_STATE'=Move);
	[] (M1_STATE = Lost)&!isEmpty(setMiner1)   ->  1 : (M1_STATE'=Add)&(b1'=extractBlock(setMiner1));
  	[] (M1_STATE = Lost)&isEmpty(set1)&isEmpty(setMiner1)   ->  1 : (M1_STATE'=Mine);
  	[removeBlock1] (M1_STATE=Move) -> 1 : (setMiner1'=addBlockSet(setMiner1,b1))&(M1_STATE'=Mine);
	[] (M1_STATE=Add)&(canBeInserted(B1,b1)) -> 1 : (B1'=addBlock(B1,b1))&(setMiner1'=removeBlock(setMiner1,b1))&(M1_STATE'=Mine);
	[] (M1_STATE=Add)&(!canBeInserted(B1,b1)) -> 1 : (M1_STATE'=Lost);
endmodule

module M2

	M2_STATE : [Mine..Move] init Mine;
	b2 : block {m2,0;genesis,0};
	B2 : blockchain [{genesis,0;genesis,0}];
	c2 : [0..N] init 0;
	setMiner2 : list [];

	[win2] (M2_STATE = Mine) -> hR2 : (M2_STATE'=Winner)&(b2'=createB(b2,B2,c2))&(c2'=c2+1);
  	[lose2] (M2_STATE = Mine) -> hR2 : (M2_STATE'=Lost);
	[addBlock2] (M2_STATE = Winner) -> 1 : (B2'=addBlock(B2,b2))&(M2_STATE'=Mine);
	[] (M2_STATE = Lost)&!isEmpty(set2)-> 1 : (b2'=extractBlock(set2))&(M2_STATE'=Move);
	[] (M2_STATE = Lost)&!isEmpty(setMiner2)   ->  1 : (M2_STATE'=Add)&(b2'=extractBlock(setMiner2));
  	[] (M2_STATE = Lost)&isEmpty(set2)&isEmpty(setMiner2)   ->  1 : (M2_STATE'=Mine);
  	[removeBlock2] (M2_STATE=Move) -> 1 : (setMiner2'=addBlockSet(setMiner2,b2))&(M2_STATE'=Mine);
	[] (M2_STATE=Add)&(canBeInserted(B2,b2)) -> 1 : (B2'=addBlock(B2,b2))&(setMiner2'=removeBlock(setMiner2,b2))&(M2_STATE'=Mine);
	[] (M2_STATE=Add)&(!canBeInserted(B2,b2)) -> 1 : (M2_STATE'=Lost);
endmodule

module M3

	M3_STATE : [Mine..Move] init Mine;
	b3 : block {m3,0;genesis,0};
	B3 : blockchain [{genesis,0;genesis,0}];
	c3 : [0..N] init 0;
	setMiner3 : list [];

	[win3] (M3_STATE = Mine) -> hR3 : (M3_STATE'=Winner)&(b3'=createB(b3,B3,c3))&(c3'=c3+1);
  	[lose3] (M3_STATE = Mine) -> hR3 : (M3_STATE'=Lost);
	[addBlock3] (M3_STATE = Winner) -> 1 : (B3'=addBlock(B3,b3))&(M3_STATE'=Mine);
	[] (M3_STATE = Lost)&!isEmpty(set3)-> 1 : (b3'=extractBlock(set3))&(M3_STATE'=Move);
	[] (M3_STATE = Lost)&!isEmpty(setMiner3)   ->  1 : (M3_STATE'=Add)&(b3'=extractBlock(setMiner3));
  	[] (M3_STATE = Lost)&isEmpty(set3)&isEmpty(setMiner3)   ->  1 : (M3_STATE'=Mine);
  	[removeBlock3] (M3_STATE=Move) -> 1 : (setMiner3'=addBlockSet(setMiner3,b3))&(M3_STATE'=Mine);
	[] (M3_STATE=Add)&(canBeInserted(B3,b3)) -> 1 : (B3'=addBlock(B3,b3))&(setMiner3'=removeBlock(setMiner3,b3))&(M3_STATE'=Mine);
	[] (M3_STATE=Add)&(!canBeInserted(B3,b3)) -> 1 : (M3_STATE'=Lost);
endmodule

module M4

	M4_STATE : [Mine..Move] init Mine;
	b4 : block {m4,0;genesis,0};
	B4 : blockchain [{genesis,0;genesis,0}];
	c4 : [0..N] init 0;
	setMiner4 : list [];

	[win4] (M4_STATE = Mine) -> hR4 : (M4_STATE'=Winner)&(b4'=createB(b4,B4,c4))&(c4'=c4+1);
  	[lose4] (M4_STATE = Mine) -> hR4 : (M4_STATE'=Lost);
	[addBlock4] (M4_STATE = Winner) -> 1 : (B4'=addBlock(B4,b4))&(M4_STATE'=Mine);
	[] (M4_STATE = Lost)&!isEmpty(set4)-> 1 : (b4'=extractBlock(set4))&(M4_STATE'=Move);
	[] (M4_STATE = Lost)&!isEmpty(setMiner4)   ->  1 : (M4_STATE'=Add)&(b4'=extractBlock(setMiner4));
  	[] (M4_STATE = Lost)&isEmpty(set4)&isEmpty(setMiner4)   ->  1 : (M4_STATE'=Mine);
  	[removeBlock4] (M4_STATE=Move) -> 1 : (setMiner4'=addBlockSet(setMiner4,b4))&(M4_STATE'=Mine);
	[] (M4_STATE=Add)&(canBeInserted(B4,b4)) -> 1 : (B4'=addBlock(B4,b4))&(setMiner4'=removeBlock(setMiner4,b4))&(M4_STATE'=Mine);
	[] (M4_STATE=Add)&(!canBeInserted(B4,b4)) -> 1 : (M4_STATE'=Lost);
endmodule

module Network

	Network_STATE : [0..2] init 0;

	set : list [];
	set1 : list [];
	set2 : list [];
	set3 : list [];
	set4 : list [];
	len : [0..N] init 0;
	len1 : [0..N] init 0;
	len2 : [0..N] init 0;
	len3 : [0..N] init 0;
	len4 : [0..N] init 0;

  	[addBlock] (M_STATE=Winner)  -> rb : (set1'=addBlockSet(set1,b))&(set2'=addBlockSet(set2,b))&(set3'=addBlockSet(set3,b))&(set4'=addBlockSet(set4,b));
	[removeBlock] (M_STATE=Lost) -> 1 : (set'=removeBlock(set,b));
	[addBlock1] (M1_STATE=Winner) -> rb : (set'=addBlockSet(set,b1))&(set2'=addBlockSet(set2,b1))&(set3'=addBlockSet(set3,b1))&(set4'=addBlockSet(set4,b1));
	[removeBlock1] (M1_STATE=Lost) -> 1 : (set1'=removeBlock(set1,b1));
	[addBlock2] (M2_STATE=Winner)   -> rb : (set1'=addBlockSet(set1,b2))&(set'=addBlockSet(set,b2))&(set3'=addBlockSet(set3,b2))&(set4'=addBlockSet(set4,b2));
	[removeBlock2] (M2_STATE=Lost) -> 1 : (set2'=removeBlock(set2,b2));
	[addBlock3] (M3_STATE=Winner)   -> rb : (set1'=addBlockSet(set1,b3))&(set2'=addBlockSet(set2,b3))&(set'=addBlockSet(set,b3))&(set4'=addBlockSet(set4,b3));
	[removeBlock3] (M3_STATE=Lost) -> 1 : (set3'=removeBlock(set3,b3));
	[addBlock4] (M4_STATE=Winner)   -> rb : (set1'=addBlockSet(set1,b4))&(set2'=addBlockSet(set2,b4))&(set3'=addBlockSet(set3,b4))&(set'=addBlockSet(set,b4));
	[removeBlock4] (M4_STATE=Lost) -> 1 : (set4'=removeBlock(set4,b4));

endmodule

module Global

	diff : [0..N] init 0;
	diff1 : [0..N] init 0;
	diff2 : [0..N] init 0;
	diff3 : [0..N] init 0;
	diff4 : [0..N] init 0;

	[] (M_STATE = Add) -> 1 : (diff'=calculateFork(B,B1,B2,B3,B4));
	[] (M1_STATE = Add) -> 1 : (diff1'=calculateFork(B,B1,B2,B3,B4));
	[] (M2_STATE = Add) -> 1 : (diff2'=calculateFork(B,B1,B2,B3,B4));
	[] (M3_STATE = Add) -> 1 : (diff3'=calculateFork(B,B1,B2,B3,B4));
	[] (M4_STATE = Add) -> 1 : (diff4'=calculateFork(B,B1,B2,B3,B4));

endmodule


label "mining" = M_STATE = Winner | M1_STATE = Winner | M2_STATE = Winner |  M3_STATE = Winner |  M4_STATE = Winner;
label "mining0" = M_STATE = Winner;
label "mining1" = M1_STATE = Winner;
label "mining2" = M2_STATE = Winner;
label "mining3" = M3_STATE = Winner;
label "mining4" = M4_STATE = Winner;
