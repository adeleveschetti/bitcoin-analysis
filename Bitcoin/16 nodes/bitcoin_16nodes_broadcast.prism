ctmc


const k;
const T=k*600;

// rates
const double rb=10/126 ;
const double mR = 1/600;
const double lR = 1-mR;

// hashing powers
const double hR = 19.1/100;
const double hR1 = 0.3/100;
const double hR2 = 6.4/100;
const double hR3 = 8.6/100;
const double hR4 = 7.2/100;
const double hR5 = 6.9/100;
const double hR6 = 6.6/100;
const double hR7 = 11.1/100;
const double hR8 = 6.4/100;
const double hR9 = 3.9/100;
const double hR10 = 3/100;
const double hR11 = 3/100;
const double hR12 = 1.7/100;
const double hR13 = 1.1/100;
const double hR14 = 14.1/100;
const double hR15 = 0.6/100;

const int N = 100;

// state variables
const int Mine = 0;
const int Winner = 1;
const int Lost = 2;
const int Move = 3;
const int Add = 4;


module Hasher

  Hasher_STATE : [0..1] init 0;

	[win] (Hasher_STATE=0) -> mR : (Hasher_STATE'=0);
	[lose] (Hasher_STATE=0) -> lR : (Hasher_STATE'=0);

endmodule

module Hasher1

  Hasher1_STATE : [0..1] init 0;

	[win1] (Hasher1_STATE=0) -> mR : (Hasher1_STATE'=0);
	[lose1] (Hasher1_STATE=0) -> lR : (Hasher1_STATE'=0);

endmodule

module Hasher2

  Hasher2_STATE : [0..1] init 0;

	[win2] (Hasher2_STATE=0) -> mR : (Hasher2_STATE'=0);
	[lose2] (Hasher2_STATE=0) -> lR : (Hasher2_STATE'=0);

endmodule

module Hasher3

  Hasher3_STATE : [0..1] init 0;

	[win3] (Hasher3_STATE=0) -> mR : (Hasher3_STATE'=0);
	[lose3] (Hasher3_STATE=0) -> lR : (Hasher3_STATE'=0);

endmodule

module Hasher4

  Hasher4_STATE : [0..1] init 0;

	[win4] (Hasher4_STATE=0) -> mR : (Hasher4_STATE'=0);
	[lose4] (Hasher4_STATE=0) -> lR : (Hasher4_STATE'=0);

endmodule

module Hasher5

  Hasher5_STATE : [0..1] init 0;

	[win5] (Hasher5_STATE=0) -> mR : (Hasher5_STATE'=0);
	[lose5] (Hasher5_STATE=0) -> lR : (Hasher5_STATE'=0);

endmodule

module Hasher6

  Hasher6_STATE : [0..1] init 0;

	[win6] (Hasher6_STATE=0) -> mR : (Hasher6_STATE'=0);
	[lose6] (Hasher6_STATE=0) -> lR : (Hasher6_STATE'=0);

endmodule

module Hasher7

  Hasher7_STATE : [0..1] init 0;

	[win7] (Hasher7_STATE=0) -> mR : (Hasher7_STATE'=0);
	[lose7] (Hasher7_STATE=0) -> lR : (Hasher7_STATE'=0);

endmodule

module Hasher8

  Hasher8_STATE : [0..1] init 0;

	[win8] (Hasher8_STATE=0) -> mR : (Hasher8_STATE'=0);
	[lose8] (Hasher8_STATE=0) -> lR : (Hasher8_STATE'=0);

endmodule

module Hasher9

  Hasher9_STATE : [0..1] init 0;

	[win9] (Hasher9_STATE=0) -> mR : (Hasher9_STATE'=0);
	[lose9] (Hasher9_STATE=0) -> lR : (Hasher9_STATE'=0);

endmodule

module Hasher10

  Hasher10_STATE : [0..1] init 0;

	[win10] (Hasher10_STATE=0) -> mR : (Hasher10_STATE'=0);
	[lose10] (Hasher10_STATE=0) -> lR : (Hasher10_STATE'=0);

endmodule

module Hasher11

  Hasher11_STATE : [0..1] init 0;

	[win11] (Hasher11_STATE=0) -> mR : (Hasher11_STATE'=0);
	[lose11] (Hasher11_STATE=0) -> lR : (Hasher11_STATE'=0);

endmodule

module Hasher12

  Hasher12_STATE : [0..1] init 0;

	[win12] (Hasher12_STATE=0) -> mR : (Hasher12_STATE'=0);
	[lose12] (Hasher12_STATE=0) -> lR : (Hasher12_STATE'=0);

endmodule

module Hasher13

  Hasher13_STATE : [0..1] init 0;

	[win13] (Hasher13_STATE=0) -> mR : (Hasher13_STATE'=0);
	[lose13] (Hasher13_STATE=0) -> lR : (Hasher13_STATE'=0);

endmodule

module Hasher14

  Hasher14_STATE : [0..1] init 0;

	[win14] (Hasher14_STATE=0) -> mR : (Hasher14_STATE'=0);
	[lose14] (Hasher14_STATE=0) -> lR : (Hasher14_STATE'=0);

endmodule

module Hasher15

  Hasher15_STATE : [0..1] init 0;

	[win15] (Hasher15_STATE=0) -> mR : (Hasher15_STATE'=0);
	[lose15] (Hasher15_STATE=0) -> lR : (Hasher15_STATE'=0);

endmodule


module M

	M_STATE : [Mine..Move] init Mine;
	b : block {m,0;genesis,0};
	B : blockchain [{genesis,0;genesis,0}];
	c : [0..N] init 0;
	setMiner : list [];

	[win] (M_STATE = Mine) -> hR : (M_STATE'=Winner)&(b'=createB(b,B,c))&(c'=c+1);
  	[lose] (M_STATE = Mine) -> hR : (M_STATE'=Lost);
	[addBlock] (M_STATE = Winner) -> 1 : (B'=addBlock(B,b))&(M_STATE'=Mine);
	[] (M_STATE = Lost)&!isEmpty(set)-> 1 : (b'=extractBlock(set))&(M_STATE'=Move);
	[] (M_STATE = Lost)&!isEmpty(setMiner)   ->  1 : (M_STATE'=Add)&(b'=extractBlock(setMiner));
  	[] (M_STATE = Lost)&isEmpty(set)&isEmpty(setMiner)   ->  1 : (M_STATE'=Mine);
  	[removeBlock] (M_STATE=Move) -> 1 : (setMiner'=addBlockSet(setMiner,b))&(M_STATE'=Mine);
	[] (M_STATE=Add)&(canBeInserted(B,b)) -> 1 : (B'=addBlock(B,b))&(setMiner'=removeBlock(setMiner,b))&(M_STATE'=Mine);
	[] (M_STATE=Add)&(!canBeInserted(B,b)) -> 1 : (M_STATE'=Lost);
endmodule

module M1

	M1_STATE : [Mine..Move] init Mine;
	b1 : block {m1,0;genesis,0};
	B1 : blockchain [{genesis,0;genesis,0}];
	c1 : [0..N] init 0;
	setMiner1 : list [];

	[win1] (M1_STATE = Mine) -> hR1 : (M1_STATE'=Winner)&(b1'=createB(b1,B1,c1))&(c1'=c1+1);
  	[lose1] (M1_STATE = Mine) -> hR1 : (M1_STATE'=Lost);
	[addBlock1] (M1_STATE = Winner) -> 1 : (B1'=addBlock(B1,b1))&(M1_STATE'=Mine);
	[] (M1_STATE = Lost)&!isEmpty(set1)-> 1 : (b1'=extractBlock(set1))&(M1_STATE'=Move);
	[] (M1_STATE = Lost)&!isEmpty(setMiner1)   ->  1 : (M1_STATE'=Add)&(b1'=extractBlock(setMiner1));
  	[] (M1_STATE = Lost)&isEmpty(set1)&isEmpty(setMiner1)   ->  1 : (M1_STATE'=Mine);
  	[removeBlock1] (M1_STATE=Move) -> 1 : (setMiner1'=addBlockSet(setMiner1,b1))&(M1_STATE'=Mine);
	[] (M1_STATE=Add)&(canBeInserted(B1,b1)) -> 1 : (B1'=addBlock(B1,b1))&(setMiner1'=removeBlock(setMiner1,b1))&(M1_STATE'=Mine);
	[] (M1_STATE=Add)&(!canBeInserted(B1,b1)) -> 1 : (M1_STATE'=Lost);
endmodule

module M2

	M2_STATE : [Mine..Move] init Mine;
	b2 : block {m2,0;genesis,0};
	B2 : blockchain [{genesis,0;genesis,0}];
	c2 : [0..N] init 0;
	setMiner2 : list [];

	[win2] (M2_STATE = Mine) -> hR2 : (M2_STATE'=Winner)&(b2'=createB(b2,B2,c2))&(c2'=c2+1);
  	[lose2] (M2_STATE = Mine) -> hR2 : (M2_STATE'=Lost);
	[addBlock2] (M2_STATE = Winner) -> 1 : (B2'=addBlock(B2,b2))&(M2_STATE'=Mine);
	[] (M2_STATE = Lost)&!isEmpty(set2)-> 1 : (b2'=extractBlock(set2))&(M2_STATE'=Move);
	[] (M2_STATE = Lost)&!isEmpty(setMiner2)   ->  1 : (M2_STATE'=Add)&(b2'=extractBlock(setMiner2));
  	[] (M2_STATE = Lost)&isEmpty(set2)&isEmpty(setMiner2)   ->  1 : (M2_STATE'=Mine);
  	[removeBlock2] (M2_STATE=Move) -> 1 : (setMiner2'=addBlockSet(setMiner2,b2))&(M2_STATE'=Mine);
	[] (M2_STATE=Add)&(canBeInserted(B2,b2)) -> 1 : (B2'=addBlock(B2,b2))&(setMiner2'=removeBlock(setMiner2,b2))&(M2_STATE'=Mine);
	[] (M2_STATE=Add)&(!canBeInserted(B2,b2)) -> 1 : (M2_STATE'=Lost);
endmodule

module M3

	M3_STATE : [Mine..Move] init Mine;
	b3 : block {m3,0;genesis,0};
	B3 : blockchain [{genesis,0;genesis,0}];
	c3 : [0..N] init 0;
	setMiner3 : list [];

	[win3] (M3_STATE = Mine) -> hR3 : (M3_STATE'=Winner)&(b3'=createB(b3,B3,c3))&(c3'=c3+1);
  	[lose3] (M3_STATE = Mine) -> hR3 : (M3_STATE'=Lost);
	[addBlock3] (M3_STATE = Winner) -> 1 : (B3'=addBlock(B3,b3))&(M3_STATE'=Mine);
	[] (M3_STATE = Lost)&!isEmpty(set3)-> 1 : (b3'=extractBlock(set3))&(M3_STATE'=Move);
	[] (M3_STATE = Lost)&!isEmpty(setMiner3)   ->  1 : (M3_STATE'=Add)&(b3'=extractBlock(setMiner3));
  	[] (M3_STATE = Lost)&isEmpty(set3)&isEmpty(setMiner3)   ->  1 : (M3_STATE'=Mine);
  	[removeBlock3] (M3_STATE=Move) -> 1 : (setMiner3'=addBlockSet(setMiner3,b3))&(M3_STATE'=Mine);
	[] (M3_STATE=Add)&(canBeInserted(B3,b3)) -> 1 : (B3'=addBlock(B3,b3))&(setMiner3'=removeBlock(setMiner3,b3))&(M3_STATE'=Mine);
	[] (M3_STATE=Add)&(!canBeInserted(B3,b3)) -> 1 : (M3_STATE'=Lost);
endmodule

module M4

	M4_STATE : [Mine..Move] init Mine;
	b4 : block {m4,0;genesis,0};
	B4 : blockchain [{genesis,0;genesis,0}];
	c4 : [0..N] init 0;
	setMiner4 : list [];

	[win4] (M4_STATE = Mine) -> hR4 : (M4_STATE'=Winner)&(b4'=createB(b4,B4,c4))&(c4'=c4+1);
  	[lose4] (M4_STATE = Mine) -> hR4 : (M4_STATE'=Lost);
	[addBlock4] (M4_STATE = Winner) -> 1 : (B4'=addBlock(B4,b4))&(M4_STATE'=Mine);
	[] (M4_STATE = Lost)&!isEmpty(set4)-> 1 : (b4'=extractBlock(set4))&(M4_STATE'=Move);
	[] (M4_STATE = Lost)&!isEmpty(setMiner4)   ->  1 : (M4_STATE'=Add)&(b4'=extractBlock(setMiner4));
  	[] (M4_STATE = Lost)&isEmpty(set4)&isEmpty(setMiner4)   ->  1 : (M4_STATE'=Mine);
  	[removeBlock4] (M4_STATE=Move) -> 1 : (setMiner4'=addBlockSet(setMiner4,b4))&(M4_STATE'=Mine);
	[] (M4_STATE=Add)&(canBeInserted(B4,b4)) -> 1 : (B4'=addBlock(B4,b4))&(setMiner4'=removeBlock(setMiner4,b4))&(M4_STATE'=Mine);
	[] (M4_STATE=Add)&(!canBeInserted(B4,b4)) -> 1 : (M4_STATE'=Lost);
endmodule

module M5

	M5_STATE : [Mine..Move] init Mine;
	b5 : block {m5,0;genesis,0};
	B5 : blockchain [{genesis,0;genesis,0}];
	c5 : [0..N] init 0;
	setMiner5 : list [];

	[win5] (M5_STATE = Mine) -> hR5 : (M5_STATE'=Winner)&(b5'=createB(b5,B5,c5))&(c5'=c5+1);
  	[lose5] (M5_STATE = Mine) -> hR5 : (M5_STATE'=Lost);
	[addBlock5] (M5_STATE = Winner) -> 1 : (B5'=addBlock(B5,b5))&(M5_STATE'=Mine);
	[] (M5_STATE = Lost)&!isEmpty(set5)-> 1 : (b5'=extractBlock(set5))&(M5_STATE'=Move);
	[] (M5_STATE = Lost)&!isEmpty(setMiner5)   ->  1 : (M5_STATE'=Add)&(b5'=extractBlock(setMiner5));
  	[] (M5_STATE = Lost)&isEmpty(set5)&isEmpty(setMiner5)   ->  1 : (M5_STATE'=Mine);
  	[removeBlock5] (M5_STATE=Move) -> 1 : (setMiner5'=addBlockSet(setMiner5,b5))&(M5_STATE'=Mine);
	[] (M5_STATE=Add)&(canBeInserted(B5,b5)) -> 1 : (B5'=addBlock(B5,b5))&(setMiner5'=removeBlock(setMiner5,b5))&(M5_STATE'=Mine);
	[] (M5_STATE=Add)&(!canBeInserted(B5,b5)) -> 1 : (M5_STATE'=Lost);
endmodule

module M6

	M6_STATE : [Mine..Move] init Mine;
	b6 : block {m6,0;genesis,0};
	B6 : blockchain [{genesis,0;genesis,0}];
	c6 : [0..N] init 0;
	setMiner6 : list [];

	[win6] (M6_STATE = Mine) -> hR6 : (M6_STATE'=Winner)&(b6'=createB(b6,B6,c6))&(c6'=c6+1);
  	[lose6] (M6_STATE = Mine) -> hR6 : (M6_STATE'=Lost);
	[addBlock6] (M6_STATE = Winner) -> 1 : (B6'=addBlock(B6,b6))&(M6_STATE'=Mine);
	[] (M6_STATE = Lost)&!isEmpty(set6)-> 1 : (b6'=extractBlock(set6))&(M6_STATE'=Move);
	[] (M6_STATE = Lost)&!isEmpty(setMiner6)   ->  1 : (M6_STATE'=Add)&(b6'=extractBlock(setMiner6));
  	[] (M6_STATE = Lost)&isEmpty(set6)&isEmpty(setMiner6)   ->  1 : (M6_STATE'=Mine);
  	[removeBlock6] (M6_STATE=Move) -> 1 : (setMiner6'=addBlockSet(setMiner6,b6))&(M6_STATE'=Mine);
	[] (M6_STATE=Add)&(canBeInserted(B6,b6)) -> 1 : (B6'=addBlock(B6,b6))&(setMiner6'=removeBlock(setMiner6,b6))&(M6_STATE'=Mine);
	[] (M6_STATE=Add)&(!canBeInserted(B6,b6)) -> 1 : (M6_STATE'=Lost);
endmodule

module M7

	M7_STATE : [Mine..Move] init Mine;
	b7 : block {m7,0;genesis,0};
	B7 : blockchain [{genesis,0;genesis,0}];
	c7 : [0..N] init 0;
	setMiner7 : list [];

	[win7] (M7_STATE = Mine) -> hR7 : (M7_STATE'=Winner)&(b7'=createB(b7,B7,c7))&(c7'=c7+1);
  	[lose7] (M7_STATE = Mine) -> hR7 : (M7_STATE'=Lost);
	[addBlock7] (M7_STATE = Winner) -> 1 : (B7'=addBlock(B7,b7))&(M7_STATE'=Mine);
	[] (M7_STATE = Lost)&!isEmpty(set7)-> 1 : (b7'=extractBlock(set7))&(M7_STATE'=Move);
	[] (M7_STATE = Lost)&!isEmpty(setMiner7)   ->  1 : (M7_STATE'=Add)&(b7'=extractBlock(setMiner7));
  	[] (M7_STATE = Lost)&isEmpty(set7)&isEmpty(setMiner7)   ->  1 : (M7_STATE'=Mine);
  	[removeBlock7] (M7_STATE=Move) -> 1 : (setMiner7'=addBlockSet(setMiner7,b7))&(M7_STATE'=Mine);
	[] (M7_STATE=Add)&(canBeInserted(B7,b7)) -> 1 : (B7'=addBlock(B7,b7))&(setMiner7'=removeBlock(setMiner7,b7))&(M7_STATE'=Mine);
	[] (M7_STATE=Add)&(!canBeInserted(B7,b7)) -> 1 : (M7_STATE'=Lost);
endmodule

module M8

	M8_STATE : [Mine..Move] init Mine;
	b8 : block {m8,0;genesis,0};
	B8 : blockchain [{genesis,0;genesis,0}];
	c8 : [0..N] init 0;
	setMiner8 : list [];

	[win8] (M8_STATE = Mine) -> hR8 : (M8_STATE'=Winner)&(b8'=createB(b8,B8,c8))&(c8'=c8+1);
  	[lose8] (M8_STATE = Mine) -> hR8 : (M8_STATE'=Lost);
	[addBlock8] (M8_STATE = Winner) -> 1 : (B8'=addBlock(B8,b8))&(M8_STATE'=Mine);
	[] (M8_STATE = Lost)&!isEmpty(set8)-> 1 : (b8'=extractBlock(set8))&(M8_STATE'=Move);
	[] (M8_STATE = Lost)&!isEmpty(setMiner8)   ->  1 : (M8_STATE'=Add)&(b8'=extractBlock(setMiner8));
  	[] (M8_STATE = Lost)&isEmpty(set8)&isEmpty(setMiner8)   ->  1 : (M8_STATE'=Mine);
  	[removeBlock8] (M8_STATE=Move) -> 1 : (setMiner8'=addBlockSet(setMiner8,b8))&(M8_STATE'=Mine);
	[] (M8_STATE=Add)&(canBeInserted(B8,b8)) -> 1 : (B8'=addBlock(B8,b8))&(setMiner8'=removeBlock(setMiner8,b8))&(M8_STATE'=Mine);
	[] (M8_STATE=Add)&(!canBeInserted(B8,b8)) -> 1 : (M8_STATE'=Lost);
endmodule

module M9

	M9_STATE : [Mine..Move] init Mine;
	b9 : block {m9,0;genesis,0};
	B9 : blockchain [{genesis,0;genesis,0}];
	c9 : [0..N] init 0;
	setMiner9 : list [];

	[win9] (M9_STATE = Mine) -> hR9 : (M9_STATE'=Winner)&(b9'=createB(b9,B9,c9))&(c9'=c9+1);
  	[lose9] (M9_STATE = Mine) -> hR9 : (M9_STATE'=Lost);
	[addBlock9] (M9_STATE = Winner) -> 1 : (B9'=addBlock(B9,b9))&(M9_STATE'=Mine);
	[] (M9_STATE = Lost)&!isEmpty(set9)-> 1 : (b9'=extractBlock(set9))&(M9_STATE'=Move);
	[] (M9_STATE = Lost)&!isEmpty(setMiner9)   ->  1 : (M9_STATE'=Add)&(b9'=extractBlock(setMiner9));
  	[] (M9_STATE = Lost)&isEmpty(set9)&isEmpty(setMiner9)   ->  1 : (M9_STATE'=Mine);
  	[removeBlock9] (M9_STATE=Move) -> 1 : (setMiner9'=addBlockSet(setMiner9,b9))&(M9_STATE'=Mine);
	[] (M9_STATE=Add)&(canBeInserted(B9,b9)) -> 1 : (B9'=addBlock(B9,b9))&(setMiner9'=removeBlock(setMiner9,b9))&(M9_STATE'=Mine);
	[] (M9_STATE=Add)&(!canBeInserted(B9,b9)) -> 1 : (M9_STATE'=Lost);
endmodule

module M10

	M10_STATE : [Mine..Move] init Mine;
	b10 : block {m10,0;genesis,0};
	B10 : blockchain [{genesis,0;genesis,0}];
	c10 : [0..N] init 0;
	setMiner10 : list [];

	[win10] (M10_STATE = Mine) -> hR10 : (M10_STATE'=Winner)&(b10'=createB(b10,B10,c10))&(c10'=c10+1);
  	[lose10] (M10_STATE = Mine) -> hR10 : (M10_STATE'=Lost);
	[addBlock10] (M10_STATE = Winner) -> 1 : (B10'=addBlock(B10,b10))&(M10_STATE'=Mine);
	[] (M10_STATE = Lost)&!isEmpty(set10)-> 1 : (b10'=extractBlock(set10))&(M10_STATE'=Move);
	[] (M10_STATE = Lost)&!isEmpty(setMiner10)   ->  1 : (M10_STATE'=Add)&(b10'=extractBlock(setMiner10));
  	[] (M10_STATE = Lost)&isEmpty(set10)&isEmpty(setMiner10)   ->  1 : (M10_STATE'=Mine);
  	[removeBlock10] (M10_STATE=Move) -> 1 : (setMiner10'=addBlockSet(setMiner10,b10))&(M10_STATE'=Mine);
	[] (M10_STATE=Add)&(canBeInserted(B10,b10)) -> 1 : (B10'=addBlock(B10,b10))&(setMiner10'=removeBlock(setMiner10,b10))&(M10_STATE'=Mine);
	[] (M10_STATE=Add)&(!canBeInserted(B10,b10)) -> 1 : (M10_STATE'=Lost);
endmodule

module M11

	M11_STATE : [Mine..Move] init Mine;
	b11 : block {m11,0;genesis,0};
	B11 : blockchain [{genesis,0;genesis,0}];
	c11 : [0..N] init 0;
	setMiner11 : list [];

	[win11] (M11_STATE = Mine) -> hR11 : (M11_STATE'=Winner)&(b11'=createB(b11,B11,c11))&(c11'=c11+1);
  	[lose11] (M11_STATE = Mine) -> hR11 : (M11_STATE'=Lost);
	[addBlock11] (M11_STATE = Winner) -> 1 : (B11'=addBlock(B11,b11))&(M11_STATE'=Mine);
	[] (M11_STATE = Lost)&!isEmpty(set11)-> 1 : (b11'=extractBlock(set11))&(M11_STATE'=Move);
	[] (M11_STATE = Lost)&!isEmpty(setMiner11)   ->  1 : (M11_STATE'=Add)&(b11'=extractBlock(setMiner11));
  	[] (M11_STATE = Lost)&isEmpty(set11)&isEmpty(setMiner11)   ->  1 : (M11_STATE'=Mine);
  	[removeBlock11] (M11_STATE=Move) -> 1 : (setMiner11'=addBlockSet(setMiner11,b11))&(M11_STATE'=Mine);
	[] (M11_STATE=Add)&(canBeInserted(B11,b11)) -> 1 : (B11'=addBlock(B11,b11))&(setMiner11'=removeBlock(setMiner11,b11))&(M11_STATE'=Mine);
	[] (M11_STATE=Add)&(!canBeInserted(B11,b11)) -> 1 : (M11_STATE'=Lost);
endmodule

module M12

	M12_STATE : [Mine..Move] init Mine;
	b12 : block {m12,0;genesis,0};
	B12 : blockchain [{genesis,0;genesis,0}];
	c12 : [0..N] init 0;
	setMiner12 : list [];

	[win12] (M12_STATE = Mine) -> hR12 : (M12_STATE'=Winner)&(b12'=createB(b12,B12,c12))&(c12'=c12+1);
  	[lose12] (M12_STATE = Mine) -> hR12 : (M12_STATE'=Lost);
	[addBlock12] (M12_STATE = Winner) -> 1 : (B12'=addBlock(B12,b12))&(M12_STATE'=Mine);
	[] (M12_STATE = Lost)&!isEmpty(set12)-> 1 : (b12'=extractBlock(set12))&(M12_STATE'=Move);
	[] (M12_STATE = Lost)&!isEmpty(setMiner12)   ->  1 : (M12_STATE'=Add)&(b12'=extractBlock(setMiner12));
  	[] (M12_STATE = Lost)&isEmpty(set12)&isEmpty(setMiner12)   ->  1 : (M12_STATE'=Mine);
  	[removeBlock12] (M12_STATE=Move) -> 1 : (setMiner12'=addBlockSet(setMiner12,b12))&(M12_STATE'=Mine);
	[] (M12_STATE=Add)&(canBeInserted(B12,b12)) -> 1 : (B12'=addBlock(B12,b12))&(setMiner12'=removeBlock(setMiner12,b12))&(M12_STATE'=Mine);
	[] (M12_STATE=Add)&(!canBeInserted(B12,b12)) -> 1 : (M12_STATE'=Lost);
endmodule

module M13

	M13_STATE : [Mine..Move] init Mine;
	b13 : block {m13,0;genesis,0};
	B13 : blockchain [{genesis,0;genesis,0}];
	c13 : [0..N] init 0;
	setMiner13 : list [];

	[win13] (M13_STATE = Mine) -> hR13 : (M13_STATE'=Winner)&(b13'=createB(b13,B13,c13))&(c13'=c13+1);
  	[lose13] (M13_STATE = Mine) -> hR13 : (M13_STATE'=Lost);
	[addBlock13] (M13_STATE = Winner) -> 1 : (B13'=addBlock(B13,b13))&(M13_STATE'=Mine);
	[] (M13_STATE = Lost)&!isEmpty(set13)-> 1 : (b13'=extractBlock(set13))&(M13_STATE'=Move);
	[] (M13_STATE = Lost)&!isEmpty(setMiner13)   ->  1 : (M13_STATE'=Add)&(b13'=extractBlock(setMiner13));
  	[] (M13_STATE = Lost)&isEmpty(set13)&isEmpty(setMiner13)   ->  1 : (M13_STATE'=Mine);
  	[removeBlock13] (M13_STATE=Move) -> 1 : (setMiner13'=addBlockSet(setMiner13,b13))&(M13_STATE'=Mine);
	[] (M13_STATE=Add)&(canBeInserted(B13,b13)) -> 1 : (B13'=addBlock(B13,b13))&(setMiner13'=removeBlock(setMiner13,b13))&(M13_STATE'=Mine);
	[] (M13_STATE=Add)&(!canBeInserted(B13,b13)) -> 1 : (M13_STATE'=Lost);
endmodule

module M14

	M14_STATE : [Mine..Move] init Mine;
	b14 : block {m14,0;genesis,0};
	B14 : blockchain [{genesis,0;genesis,0}];
	c14 : [0..N] init 0;
	setMiner14 : list [];

	[win14] (M14_STATE = Mine) -> hR14 : (M14_STATE'=Winner)&(b14'=createB(b14,B14,c14))&(c14'=c14+1);
  	[lose14] (M14_STATE = Mine) -> hR14 : (M14_STATE'=Lost);
	[addBlock14] (M14_STATE = Winner) -> 1 : (B14'=addBlock(B14,b14))&(M14_STATE'=Mine);
	[] (M14_STATE = Lost)&!isEmpty(set14)-> 1 : (b14'=extractBlock(set14))&(M14_STATE'=Move);
	[] (M14_STATE = Lost)&!isEmpty(setMiner14)   ->  1 : (M14_STATE'=Add)&(b14'=extractBlock(setMiner14));
  	[] (M14_STATE = Lost)&isEmpty(set14)&isEmpty(setMiner14)   ->  1 : (M14_STATE'=Mine);
  	[removeBlock14] (M14_STATE=Move) -> 1 : (setMiner14'=addBlockSet(setMiner14,b14))&(M14_STATE'=Mine);
	[] (M14_STATE=Add)&(canBeInserted(B14,b14)) -> 1 : (B14'=addBlock(B14,b14))&(setMiner14'=removeBlock(setMiner14,b14))&(M14_STATE'=Mine);
	[] (M14_STATE=Add)&(!canBeInserted(B14,b14)) -> 1 : (M14_STATE'=Lost);
endmodule

module M15

	M15_STATE : [Mine..Move] init Mine;
	b15 : block {m15,0;genesis,0};
	B15 : blockchain [{genesis,0;genesis,0}];
	c15 : [0..N] init 0;
	setMiner15 : list [];

	[win15] (M15_STATE = Mine) -> hR15 : (M15_STATE'=Winner)&(b15'=createB(b15,B15,c15))&(c15'=c15+1);
  	[lose15] (M15_STATE = Mine) -> hR15 : (M15_STATE'=Lost);
	[addBlock15] (M15_STATE = Winner) -> 1 : (B15'=addBlock(B15,b15))&(M15_STATE'=Mine);
	[] (M15_STATE = Lost)&!isEmpty(set15)-> 1 : (b15'=extractBlock(set15))&(M15_STATE'=Move);
	[] (M15_STATE = Lost)&!isEmpty(setMiner15)   ->  1 : (M15_STATE'=Add)&(b15'=extractBlock(setMiner15));
  	[] (M15_STATE = Lost)&isEmpty(set15)&isEmpty(setMiner15)   ->  1 : (M15_STATE'=Mine);
  	[removeBlock15] (M15_STATE=Move) -> 1 : (setMiner15'=addBlockSet(setMiner15,b15))&(M15_STATE'=Mine);
	[] (M15_STATE=Add)&(canBeInserted(B15,b15)) -> 1 : (B15'=addBlock(B15,b15))&(setMiner15'=removeBlock(setMiner15,b15))&(M15_STATE'=Mine);
	[] (M15_STATE=Add)&(!canBeInserted(B15,b15)) -> 1 : (M15_STATE'=Lost);
endmodule

module Network

	Network_STATE : [0..2] init 0;

	set : list [];
	set1 : list [];
	set2 : list [];
	set3 : list [];
	set4 : list [];
  set5 : list [];
  set6 : list [];
  set7 : list [];
  set8 : list [];
  set9 : list [];
  set10 : list [];
  set11 : list [];
  set12 : list [];
  set13 : list [];
  set14 : list [];
  set15 : list [];


  [addBlock] (M_STATE=Winner)  -> rb : (set1'=addBlockSet(set1,b))&(set2'=addBlockSet(set2,b))&(set3'=addBlockSet(set3,b))&(set4'=addBlockSet(set4,b))&(set5'=addBlockSet(set5,b))&(set6'=addBlockSet(set6,b))&(set7'=addBlockSet(set7,b))&(set8'=addBlockSet(set8,b))&(set9'=addBlockSet(set9,b))&(set10'=addBlockSet(set10,b))&(set11'=addBlockSet(set11,b))&(set12'=addBlockSet(set12,b))&(set13'=addBlockSet(set13,b))&(set14'=addBlockSet(set14,b))&(set15'=addBlockSet(set15,b));
	[removeBlock] (M_STATE=Move) -> 1 : (set'=removeBlock(set,b));

	[addBlock1] (M1_STATE=Winner) -> rb :(set'=addBlockSet(set,b1))&(set2'=addBlockSet(set2,b1))&(set3'=addBlockSet(set3,b1))&(set4'=addBlockSet(set4,b1))&(set5'=addBlockSet(set5,b1))&(set6'=addBlockSet(set6,b1))&(set7'=addBlockSet(set7,b1))&(set8'=addBlockSet(set8,b1))&(set9'=addBlockSet(set9,b1))&(set10'=addBlockSet(set10,b1))&(set11'=addBlockSet(set11,b1))&(set12'=addBlockSet(set12,b1))&(set13'=addBlockSet(set13,b1))&(set14'=addBlockSet(set14,b1))&(set15'=addBlockSet(set15,b1));
	[removeBlock1] (M1_STATE=Move) -> 1 : (set1'=removeBlock(set1,b1));

	[addBlock2] (M2_STATE=Winner)   -> rb : (set1'=addBlockSet(set1,b2))&(set'=addBlockSet(set,b2))&(set3'=addBlockSet(set3,b2))&(set4'=addBlockSet(set4,b2))&(set5'=addBlockSet(set5,b2))&(set6'=addBlockSet(set6,b2))&(set7'=addBlockSet(set7,b2))&(set8'=addBlockSet(set8,b2))&(set9'=addBlockSet(set9,b2))&(set10'=addBlockSet(set10,b2))&(set11'=addBlockSet(set11,b2))&(set12'=addBlockSet(set12,b2))&(set13'=addBlockSet(set13,b2))&(set14'=addBlockSet(set14,b))&(set15'=addBlockSet(set15,b2));
	[removeBlock2] (M2_STATE=Move) -> 1 : (set2'=removeBlock(set2,b2));

	[addBlock3] (M3_STATE=Winner)   -> rb : (set'=addBlockSet(set,b3))&(set2'=addBlockSet(set2,b3))&(set4'=addBlockSet(set4,b3))&(set5'=addBlockSet(set5,b3))&(set6'=addBlockSet(set6,b3))&(set7'=addBlockSet(set7,b3))&(set8'=addBlockSet(set8,b3))&(set9'=addBlockSet(set9,b3))&(set10'=addBlockSet(set10,b3))&(set11'=addBlockSet(set11,b3))&(set12'=addBlockSet(set12,b3))&(set13'=addBlockSet(set13,b3))&(set14'=addBlockSet(set14,b3))&(set15'=addBlockSet(set15,b3));
	[removeBlock3] (M3_STATE=Move) -> 1 : (set3'=removeBlock(set3,b3));

	[addBlock4] (M4_STATE=Winner)   -> rb : (set'=addBlockSet(set,b4))&(set1'=addBlockSet(set1,b4))&(set2'=addBlockSet(set2,b4))&(set3'=addBlockSet(set3,b4))&(set5'=addBlockSet(set5,b4))&(set6'=addBlockSet(set6,b4))&(set7'=addBlockSet(set7,b4))&(set8'=addBlockSet(set8,b4))&(set9'=addBlockSet(set9,b4))&(set10'=addBlockSet(set10,b4))&(set11'=addBlockSet(set11,b4))&(set12'=addBlockSet(set12,b4))&(set13'=addBlockSet(set13,b4))&(set14'=addBlockSet(set14,b4))&(set15'=addBlockSet(set15,b4));
	[removeBlock4] (M4_STATE=Move) -> 1 : (set4'=removeBlock(set4,b4));

  [addBlock5] (M5_STATE=Winner)  -> rb : (set'=addBlockSet(set,b5))&(set1'=addBlockSet(set1,b5))&(set2'=addBlockSet(set2,b5))&(set3'=addBlockSet(set3,b5))&(set4'=addBlockSet(set4,b5))&(set6'=addBlockSet(set6,b5))&(set7'=addBlockSet(set7,b5))&(set8'=addBlockSet(set8,b5))&(set9'=addBlockSet(set9,b5))&(set10'=addBlockSet(set10,b5))&(set11'=addBlockSet(set11,b5))&(set12'=addBlockSet(set12,b5))&(set13'=addBlockSet(set13,b5))&(set14'=addBlockSet(set14,b5))&(set15'=addBlockSet(set15,b5));
  [removeBlock5] (M5_STATE=Move) -> 1 : (set5'=removeBlock(set5,b5));

  [addBlock6] (M6_STATE=Winner) -> rb :(set'=addBlockSet(set,b6))&(set1'=addBlockSet(set1,b6))&(set2'=addBlockSet(set2,b6))&(set3'=addBlockSet(set3,b6))&(set4'=addBlockSet(set4,b6))&(set5'=addBlockSet(set5,b6))&(set7'=addBlockSet(set7,b6))&(set8'=addBlockSet(set8,b6))&(set9'=addBlockSet(set9,b6))&(set10'=addBlockSet(set10,b6))&(set11'=addBlockSet(set11,b6))&(set12'=addBlockSet(set12,b6))&(set13'=addBlockSet(set13,b6))&(set14'=addBlockSet(set14,b6))&(set15'=addBlockSet(set15,b6));
  [removeBlock6] (M6_STATE=Move) -> 1 : (set6'=removeBlock(set6,b6));

  [addBlock7] (M7_STATE=Winner)   -> rb : (set'=addBlockSet(set,b7))&(set1'=addBlockSet(set1,b7))&(set2'=addBlockSet(set2,b7))&(set3'=addBlockSet(set3,b7))&(set4'=addBlockSet(set4,b7))&(set5'=addBlockSet(set5,b7))&(set6'=addBlockSet(set6,b7))&(set8'=addBlockSet(set8,b7))&(set9'=addBlockSet(set9,b7))&(set10'=addBlockSet(set10,b7))&(set11'=addBlockSet(set11,b7))&(set12'=addBlockSet(set12,b7))&(set13'=addBlockSet(set13,b7))&(set14'=addBlockSet(set14,b7))&(set15'=addBlockSet(set15,b7));
  [removeBlock7] (M7_STATE=Move) -> 1 : (set7'=removeBlock(set7,b7));

  [addBlock8] (M8_STATE=Winner)   -> rb : (set'=addBlockSet(set,b8))&(set1'=addBlockSet(set1,b8))&(set2'=addBlockSet(set2,b8))&(set3'=addBlockSet(set3,b8))&(set4'=addBlockSet(set4,b8))&(set5'=addBlockSet(set5,b8))&(set6'=addBlockSet(set6,b8))&(set7'=addBlockSet(set7,b8))&(set9'=addBlockSet(set9,b8))&(set10'=addBlockSet(set10,b8))&(set11'=addBlockSet(set11,b8))&(set12'=addBlockSet(set12,b8))&(set13'=addBlockSet(set13,b8))&(set14'=addBlockSet(set14,b8))&(set15'=addBlockSet(set15,b8));
  [removeBlock8] (M8_STATE=Move) -> 1 : (set8'=removeBlock(set8,b8));

  [addBlock9] (M9_STATE=Winner)   -> rb : (set'=addBlockSet(set,b9))&(set1'=addBlockSet(set1,b9))&(set2'=addBlockSet(set2,b9))&(set3'=addBlockSet(set3,b9))&(set4'=addBlockSet(set4,b9))&(set5'=addBlockSet(set5,b9))&(set6'=addBlockSet(set6,b9))&(set7'=addBlockSet(set7,b9))&(set8'=addBlockSet(set8,b9))&(set10'=addBlockSet(set10,b9))&(set11'=addBlockSet(set11,b9))&(set12'=addBlockSet(set12,b9))&(set13'=addBlockSet(set13,b9))&(set14'=addBlockSet(set14,b9))&(set15'=addBlockSet(set15,b9));
  [removeBlock9] (M9_STATE=Move) -> 1 : (set9'=removeBlock(set9,b9));

  [addb10lock10] (M10_STATE=Winner)  -> rb : (set'=addBlockSet(set,b10))&(set1'=addBlockSet(set1,b10))&(set2'=addBlockSet(set2,b10))&(set3'=addBlockSet(set3,b10))&(set4'=addBlockSet(set4,b10))&(set5'=addBlockSet(set5,b10))&(set6'=addBlockSet(set6,b10))&(set7'=addBlockSet(set7,b10))&(set8'=addBlockSet(set8,b10))&(set9'=addBlockSet(set9,b10))&(set11'=addBlockSet(set11,b10))&(set12'=addBlockSet(set12,b10))&(set13'=addBlockSet(set13,b10))&(set14'=addBlockSet(set14,b10))&(set15'=addBlockSet(set15,b10));
  [removeBlock10] (M10_STATE=Move) -> 1 : (set10'=removeBlock(set10,b10));

  [addBlock11] (M11_STATE=Winner)  -> rb : (set'=addBlockSet(set,b11))&(set1'=addBlockSet(set1,b11))&(set2'=addBlockSet(set2,b11))&(set3'=addBlockSet(set3,b11))&(set4'=addBlockSet(set4,b11))&(set5'=addBlockSet(set5,b11))&(set6'=addBlockSet(set6,b11))&(set7'=addBlockSet(set7,b11))&(set8'=addBlockSet(set8,b11))&(set9'=addBlockSet(set9,b11))&(set10'=addBlockSet(set10,b11))&(set12'=addBlockSet(set12,b11))&(set13'=addBlockSet(set13,b11))&(set14'=addBlockSet(set14,b11))&(set15'=addBlockSet(set15,b11));
  [removeBlock11] (M11_STATE=Move) -> 1 : (set11'=removeBlock(set11,b11));

  [addBlock12] (M12_STATE=Winner)  -> rb : (set'=addBlockSet(set,b12))&(set1'=addBlockSet(set1,b12))&(set2'=addBlockSet(set2,b12))&(set3'=addBlockSet(set3,b12))&(set4'=addBlockSet(set4,b))&(set5'=addBlockSet(set5,b12))&(set6'=addBlockSet(set6,b12))&(set7'=addBlockSet(set7,b12))&(set8'=addBlockSet(set8,b12))&(set9'=addBlockSet(set9,b12))&(set10'=addBlockSet(set10,b12))&(set11'=addBlockSet(set11,b12))&(set13'=addBlockSet(set13,b12))&(set14'=addBlockSet(set14,b12))&(set15'=addBlockSet(set15,b12));
  [removeBlock12] (M12_STATE=Move) -> 1 : (set12'=removeBlock(set12,b12));

  [addBlock13] (M13_STATE=Winner)  -> rb : (set'=addBlockSet(set,b13))&(set1'=addBlockSet(set1,b13))&(set2'=addBlockSet(set2,b13))&(set3'=addBlockSet(set3,b13))&(set4'=addBlockSet(set4,b13))&(set5'=addBlockSet(set5,b13))&(set6'=addBlockSet(set6,b13))&(set7'=addBlockSet(set7,b13))&(set8'=addBlockSet(set8,b13))&(set9'=addBlockSet(set9,b13))&(set10'=addBlockSet(set10,b13))&(set11'=addBlockSet(set11,b13))&(set12'=addBlockSet(set12,b13))&(set14'=addBlockSet(set14,b13))&(set15'=addBlockSet(set15,b13));
  [removeBlock13] (M13_STATE=Move) -> 1 : (set13'=removeBlock(set13,b13));

  [addBlock14] (M14_STATE=Winner)  -> rb : (set'=addBlockSet(set,b15))&(set1'=addBlockSet(set1,b14))&(set2'=addBlockSet(set2,b14))&(set3'=addBlockSet(set3,b14))&(set4'=addBlockSet(set4,b14))&(set5'=addBlockSet(set5,b14))&(set6'=addBlockSet(set6,b14))&(set7'=addBlockSet(set7,b14))&(set8'=addBlockSet(set8,b14))&(set9'=addBlockSet(set9,b14))&(set10'=addBlockSet(set10,b14))&(set11'=addBlockSet(set11,b14))&(set12'=addBlockSet(set12,b14))&(set13'=addBlockSet(set13,b14))&(set15'=addBlockSet(set15,b14));
  [removeBlock14] (M14_STATE=Move) -> 1 : (set14'=removeBlock(set14,b14));

  [addBlock15] (M15_STATE=Winner)  -> rb : (set'=addBlockSet(set,b15))&(set1'=addBlockSet(set1,b15))&(set2'=addBlockSet(set2,b15))&(set3'=addBlockSet(set3,b15))&(set4'=addBlockSet(set4,b15))&(set5'=addBlockSet(set5,b15))&(set6'=addBlockSet(set6,b15))&(set7'=addBlockSet(set7,b15))&(set8'=addBlockSet(set8,b15))&(set9'=addBlockSet(set9,b15))&(set10'=addBlockSet(set10,b15))&(set11'=addBlockSet(set11,b15))&(set12'=addBlockSet(set12,b15))&(set13'=addBlockSet(set13,b15))&(set14'=addBlockSet(set14,b15));
  [removeBlock15] (M15_STATE=Move) -> 1 : (set15'=removeBlock(set15,b15));

endmodule



module Global

	diff : [0..N] init 0;

	[] (M_STATE = Add) | (M1_STATE = Add) | (M2_STATE = Add) | (M3_STATE = Add) | (M4_STATE = Add) | (M5_STATE = Add) | (M6_STATE = Add) | (M7_STATE = Add) | (M8_STATE = Add) | (M_STATE = Add) | (M9_STATE = Add) | (M10_STATE = Add) | (M11_STATE = Add) | (M12_STATE = Add) | (M13_STATE = Add) | (M14_STATE = Add) | (M15_STATE = Add) -> 1 : (diff'=calculateFork(B,B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15));

endmodule

label "mining" = M_STATE = Winner | M1_STATE = Winner | M2_STATE = Winner |  M3_STATE = Winner |  M4_STATE = Winner | M6_STATE = Winner | M7_STATE = Winner | M8_STATE = Winner | M5_STATE = Winner | M9_STATE = Winner | M10_STATE = Winner | M11_STATE = Winner | M12_STATE = Winner | M13_STATE = Winner | M14_STATE = Winner | M15_STATE = Winner;
